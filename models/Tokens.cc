/**
 *
 *  Tokens.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Tokens.h"
#include "Users.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::postgres;

const std::string Tokens::Cols::_id = "\"id\"";
const std::string Tokens::Cols::_hash = "\"hash\"";
const std::string Tokens::Cols::_id_user = "\"id_user\"";
const std::string Tokens::Cols::_id_api = "\"id_api\"";
const std::string Tokens::Cols::_expiry = "\"expiry\"";
const std::string Tokens::primaryKeyName = "id";
const bool Tokens::hasPrimaryKey = true;
const std::string Tokens::tableName = "\"tokens\"";

const std::vector<typename Tokens::MetaData> Tokens::metaData_={
{"id","int64_t","bigint",8,1,1,1},
{"hash","std::string","text",0,0,0,1},
{"id_user","int32_t","integer",4,0,0,1},
{"id_api","int32_t","integer",4,0,0,1},
{"expiry","::trantor::Date","timestamp with time zone",0,0,0,1}
};
const std::string &Tokens::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Tokens::Tokens(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int64_t>(r["id"].as<int64_t>());
        }
        if(!r["hash"].isNull())
        {
            hash_=std::make_shared<std::string>(r["hash"].as<std::string>());
        }
        if(!r["id_user"].isNull())
        {
            idUser_=std::make_shared<int32_t>(r["id_user"].as<int32_t>());
        }
        if(!r["id_api"].isNull())
        {
            idApi_=std::make_shared<int32_t>(r["id_api"].as<int32_t>());
        }
        if(!r["expiry"].isNull())
        {
            auto timeStr = r["expiry"].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiry_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int64_t>(r[index].as<int64_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            hash_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            idUser_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            idApi_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            auto timeStr = r[index].as<std::string>();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiry_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }

}

Tokens::Tokens(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            hash_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idUser_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            idApi_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiry_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

Tokens::Tokens(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("hash"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["hash"].isNull())
        {
            hash_=std::make_shared<std::string>(pJson["hash"].asString());
        }
    }
    if(pJson.isMember("id_user"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["id_user"].isNull())
        {
            idUser_=std::make_shared<int32_t>((int32_t)pJson["id_user"].asInt64());
        }
    }
    if(pJson.isMember("id_api"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["id_api"].isNull())
        {
            idApi_=std::make_shared<int32_t>((int32_t)pJson["id_api"].asInt64());
        }
    }
    if(pJson.isMember("expiry"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["expiry"].isNull())
        {
            auto timeStr = pJson["expiry"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiry_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Tokens::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            hash_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            idUser_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            idApi_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            auto timeStr = pJson[pMasqueradingVector[4]].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiry_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

void Tokens::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int64_t>((int64_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("hash"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["hash"].isNull())
        {
            hash_=std::make_shared<std::string>(pJson["hash"].asString());
        }
    }
    if(pJson.isMember("id_user"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["id_user"].isNull())
        {
            idUser_=std::make_shared<int32_t>((int32_t)pJson["id_user"].asInt64());
        }
    }
    if(pJson.isMember("id_api"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["id_api"].isNull())
        {
            idApi_=std::make_shared<int32_t>((int32_t)pJson["id_api"].asInt64());
        }
    }
    if(pJson.isMember("expiry"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["expiry"].isNull())
        {
            auto timeStr = pJson["expiry"].asString();
            struct tm stm;
            memset(&stm,0,sizeof(stm));
            auto p = strptime(timeStr.c_str(),"%Y-%m-%d %H:%M:%S",&stm);
            time_t t = mktime(&stm);
            size_t decimalNum = 0;
            if(p)
            {
                if(*p=='.')
                {
                    std::string decimals(p+1,&timeStr[timeStr.length()]);
                    while(decimals.length()<6)
                    {
                        decimals += "0";
                    }
                    decimalNum = (size_t)atol(decimals.c_str());
                }
                expiry_=std::make_shared<::trantor::Date>(t*1000000+decimalNum);
            }
        }
    }
}

const int64_t &Tokens::getValueOfId() const noexcept
{
    static const int64_t defaultValue = int64_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int64_t> &Tokens::getId() const noexcept
{
    return id_;
}
void Tokens::setId(const int64_t &pId) noexcept
{
    id_ = std::make_shared<int64_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Tokens::PrimaryKeyType & Tokens::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Tokens::getValueOfHash() const noexcept
{
    static const std::string defaultValue = std::string();
    if(hash_)
        return *hash_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Tokens::getHash() const noexcept
{
    return hash_;
}
void Tokens::setHash(const std::string &pHash) noexcept
{
    hash_ = std::make_shared<std::string>(pHash);
    dirtyFlag_[1] = true;
}
void Tokens::setHash(std::string &&pHash) noexcept
{
    hash_ = std::make_shared<std::string>(std::move(pHash));
    dirtyFlag_[1] = true;
}

const int32_t &Tokens::getValueOfIdUser() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idUser_)
        return *idUser_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tokens::getIdUser() const noexcept
{
    return idUser_;
}
void Tokens::setIdUser(const int32_t &pIdUser) noexcept
{
    idUser_ = std::make_shared<int32_t>(pIdUser);
    dirtyFlag_[2] = true;
}

const int32_t &Tokens::getValueOfIdApi() const noexcept
{
    static const int32_t defaultValue = int32_t();
    if(idApi_)
        return *idApi_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Tokens::getIdApi() const noexcept
{
    return idApi_;
}
void Tokens::setIdApi(const int32_t &pIdApi) noexcept
{
    idApi_ = std::make_shared<int32_t>(pIdApi);
    dirtyFlag_[3] = true;
}

const ::trantor::Date &Tokens::getValueOfExpiry() const noexcept
{
    static const ::trantor::Date defaultValue = ::trantor::Date();
    if(expiry_)
        return *expiry_;
    return defaultValue;
}
const std::shared_ptr<::trantor::Date> &Tokens::getExpiry() const noexcept
{
    return expiry_;
}
void Tokens::setExpiry(const ::trantor::Date &pExpiry) noexcept
{
    expiry_ = std::make_shared<::trantor::Date>(pExpiry);
    dirtyFlag_[4] = true;
}

void Tokens::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Tokens::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "hash",
        "id_user",
        "id_api",
        "expiry"
    };
    return inCols;
}

void Tokens::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getHash())
        {
            binder << getValueOfHash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdUser())
        {
            binder << getValueOfIdUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIdApi())
        {
            binder << getValueOfIdApi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExpiry())
        {
            binder << getValueOfExpiry();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Tokens::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Tokens::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getHash())
        {
            binder << getValueOfHash();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getIdUser())
        {
            binder << getValueOfIdUser();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getIdApi())
        {
            binder << getValueOfIdApi();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getExpiry())
        {
            binder << getValueOfExpiry();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Tokens::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getHash())
    {
        ret["hash"]=getValueOfHash();
    }
    else
    {
        ret["hash"]=Json::Value();
    }
    if(getIdUser())
    {
        ret["id_user"]=getValueOfIdUser();
    }
    else
    {
        ret["id_user"]=Json::Value();
    }
    if(getIdApi())
    {
        ret["id_api"]=getValueOfIdApi();
    }
    else
    {
        ret["id_api"]=Json::Value();
    }
    if(getExpiry())
    {
        ret["expiry"]=getExpiry()->toDbStringLocal();
    }
    else
    {
        ret["expiry"]=Json::Value();
    }
    return ret;
}

Json::Value Tokens::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=(Json::Int64)getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getHash())
            {
                ret[pMasqueradingVector[1]]=getValueOfHash();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getIdUser())
            {
                ret[pMasqueradingVector[2]]=getValueOfIdUser();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getIdApi())
            {
                ret[pMasqueradingVector[3]]=getValueOfIdApi();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getExpiry())
            {
                ret[pMasqueradingVector[4]]=getExpiry()->toDbStringLocal();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=(Json::Int64)getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getHash())
    {
        ret["hash"]=getValueOfHash();
    }
    else
    {
        ret["hash"]=Json::Value();
    }
    if(getIdUser())
    {
        ret["id_user"]=getValueOfIdUser();
    }
    else
    {
        ret["id_user"]=Json::Value();
    }
    if(getIdApi())
    {
        ret["id_api"]=getValueOfIdApi();
    }
    else
    {
        ret["id_api"]=Json::Value();
    }
    if(getExpiry())
    {
        ret["expiry"]=getExpiry()->toDbStringLocal();
    }
    else
    {
        ret["expiry"]=Json::Value();
    }
    return ret;
}

bool Tokens::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("hash"))
    {
        if(!validJsonOfField(1, "hash", pJson["hash"], err, true))
            return false;
    }
    else
    {
        err="The hash column cannot be null";
        return false;
    }
    if(pJson.isMember("id_user"))
    {
        if(!validJsonOfField(2, "id_user", pJson["id_user"], err, true))
            return false;
    }
    else
    {
        err="The id_user column cannot be null";
        return false;
    }
    if(pJson.isMember("id_api"))
    {
        if(!validJsonOfField(3, "id_api", pJson["id_api"], err, true))
            return false;
    }
    else
    {
        err="The id_api column cannot be null";
        return false;
    }
    if(pJson.isMember("expiry"))
    {
        if(!validJsonOfField(4, "expiry", pJson["expiry"], err, true))
            return false;
    }
    else
    {
        err="The expiry column cannot be null";
        return false;
    }
    return true;
}
bool Tokens::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[4] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tokens::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("hash"))
    {
        if(!validJsonOfField(1, "hash", pJson["hash"], err, false))
            return false;
    }
    if(pJson.isMember("id_user"))
    {
        if(!validJsonOfField(2, "id_user", pJson["id_user"], err, false))
            return false;
    }
    if(pJson.isMember("id_api"))
    {
        if(!validJsonOfField(3, "id_api", pJson["id_api"], err, false))
            return false;
    }
    if(pJson.isMember("expiry"))
    {
        if(!validJsonOfField(4, "expiry", pJson["expiry"], err, false))
            return false;
    }
    return true;
}
bool Tokens::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                              const std::vector<std::string> &pMasqueradingVector,
                                              std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Tokens::validJsonOfField(size_t index,
                              const std::string &fieldName,
                              const Json::Value &pJson,
                              std::string &err,
                              bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
Users Tokens::getUsers(const DbClientPtr &clientPtr) const {
    static const std::string sql = "select * from users where id = $1";
    Result r(nullptr);
    {
        auto binder = *clientPtr << sql;
        binder << *idUser_ << Mode::Blocking >>
            [&r](const Result &result) { r = result; };
        binder.exec();
    }
    if (r.size() == 0)
    {
        throw UnexpectedRows("0 rows found");
    }
    else if (r.size() > 1)
    {
        throw UnexpectedRows("Found more than one row");
    }
    return Users(r[0]);
}

void Tokens::getUsers(const DbClientPtr &clientPtr,
                      const std::function<void(Users)> &rcb,
                      const ExceptionCallback &ecb) const
{
    static const std::string sql = "select * from users where id = $1";
    *clientPtr << sql
               << *idUser_
               >> [rcb = std::move(rcb), ecb](const Result &r){
                    if (r.size() == 0)
                    {
                        ecb(UnexpectedRows("0 rows found"));
                    }
                    else if (r.size() > 1)
                    {
                        ecb(UnexpectedRows("Found more than one row"));
                    }
                    else
                    {
                        rcb(Users(r[0]));
                    }
               }
               >> ecb;
}
